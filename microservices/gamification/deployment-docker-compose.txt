version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SERVICE_REGISTRY_CONFIG=/app/config/services.json
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
    volumes:
      - ./config:/app/config
    depends_on:
      - auth-service
      - document-service
      - syllabus-service
      - compliance-service
      - debriefing-service
      - admin-dashboard
      - gamification-service
      - community-service
      - analytics-service
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atp_auth
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=3600
      - REFRESH_TOKEN_EXPIRY=2592000
      - LOG_LEVEL=info
    depends_on:
      - postgres
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Document Intelligence Service
  document-service:
    build:
      context: ./document-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atp_documents
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - NLP_SERVICE_URL=http://nlp-service:5000
      - LOG_LEVEL=info
    volumes:
      - document-storage:/app/storage
    depends_on:
      - postgres
      - nlp-service
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # NLP Service for Document Intelligence
  nlp-service:
    build:
      context: ./nlp-service
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - MODEL_DIR=/app/models
      - DATA_DIR=/app/data
      - LOG_LEVEL=info
    volumes:
      - nlp-models:/app/models
      - nlp-data:/app/data
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # Longer start period for model loading
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Syllabus Template System
  syllabus-service:
    build:
      context: ./syllabus-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atp_syllabus
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=info
    depends_on:
      - postgres
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Compliance Service
  compliance-service:
    build:
      context: ./compliance-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atp_compliance
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=info
    depends_on:
      - postgres
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Debriefing & Session Analytics Service
  debriefing-service:
    build:
      context: ./debriefing-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atp_debriefing
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=info
    depends_on:
      - postgres
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Admin Dashboard Service
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atp_admin
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=info
    depends_on:
      - postgres
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Gamification Service
  gamification-service:
    build:
      context: ./gamification-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atp_gamification
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=info
    depends_on:
      - postgres
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Community Service
  community-service:
    build:
      context: ./community-service
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=atp_community
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=info
    depends_on:
      - postgres
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Analytics Service
  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - MODEL_DIR=/app/models
      - DATA_DIR=/app/data
      - LOG_LEVEL=info
    volumes:
      - analytics-models:/app/models
      - analytics-data:/app/data
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # Longer start period for model loading
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=atp_auth,atp_documents,atp_syllabus,atp_compliance,atp_debriefing,atp_admin,atp_gamification,atp_community
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for search functionality
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.46.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    networks:
      - atp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:10.1.5
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - atp-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data:
  document-storage:
  nlp-models:
  nlp-data:
  analytics-models:
  analytics-data:
  prometheus-data:
  grafana-data:

networks:
  atp-network:
    driver: bridge
