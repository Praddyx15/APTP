version: '3.8'

services:
  # Backend services
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/aptplatform
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=development_secret_key_replace_in_production
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - apt-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - apt-network

  # AI/ML microservices
  document-intelligence:
    build:
      context: ./microservices/document-intelligence
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - ./microservices/document-intelligence:/app
    environment:
      - MODEL_PATH=/app/models
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/aptplatform
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      - postgres
      - redis
    networks:
      - apt-network

  predictive-analytics:
    build:
      context: ./microservices/predictive-analytics
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    volumes:
      - ./microservices/predictive-analytics:/app
    environment:
      - MODEL_PATH=/app/models
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/aptplatform
      - REDIS_URL=redis://redis:6379/2
    depends_on:
      - postgres
      - redis
    networks:
      - apt-network

  adaptive-learning:
    build:
      context: ./microservices/adaptive-learning
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    volumes:
      - ./microservices/adaptive-learning:/app
    environment:
      - MODEL_PATH=/app/models
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/aptplatform
      - REDIS_URL=redis://redis:6379/3
    depends_on:
      - postgres
      - redis
    networks:
      - apt-network

  gamification:
    build:
      context: ./microservices/gamification
      dockerfile: Dockerfile
    ports:
      - "8004:8000"
    volumes:
      - ./microservices/gamification:/app
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/aptplatform
      - REDIS_URL=redis://redis:6379/4
    depends_on:
      - postgres
      - redis
    networks:
      - apt-network

  # Database
  postgres:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=aptplatform
    networks:
      - apt-network
    command: ["postgres", "-c", "shared_preload_libraries=timescaledb", "-c", "max_connections=200"]

  # Cache and message broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - apt-network
    command: ["redis-server", "--appendonly", "yes"]
    
  # Search engine for document indexing
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - apt-network

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data:

networks:
  apt-network:
    driver: bridge
