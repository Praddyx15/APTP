cmake_minimum_required(VERSION 3.15)

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Project name and version
project(AdvancedPilotTrainingPlatform VERSION 1.0.0 LANGUAGES CXX)

# Options
option(BUILD_TESTS "Build test suite" ON)
option(BUILD_DOCS "Build documentation" OFF)
option(ENABLE_SANITIZERS "Enable sanitizers in debug mode" OFF)
option(ENABLE_COVERAGE "Enable coverage reporting" OFF)
option(USE_SYSTEM_DROGON "Use system installed Drogon" OFF)

# Set default build type to Release if not specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build" FORCE)
endif()

# Output directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Include custom modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# Find required packages
find_package(Threads REQUIRED)
find_package(OpenSSL REQUIRED)
find_package(PostgreSQL REQUIRED)
find_package(Boost REQUIRED COMPONENTS system filesystem)
find_package(nlohmann_json REQUIRED)
find_package(libpqxx REQUIRED)
find_package(uuid REQUIRED)
find_package(argon2 REQUIRED)
find_package(Redis REQUIRED)
find_package(spdlog REQUIRED)

# For JWT support
find_package(jwt-cpp REQUIRED)

# For Python integration
find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
find_package(pybind11 REQUIRED)

# For telemetry processing
find_package(OpenCV REQUIRED)

if(NOT USE_SYSTEM_DROGON)
    include(FetchContent)
    FetchContent_Declare(
        drogon
        GIT_REPOSITORY https://github.com/drogonframework/drogon.git
        GIT_TAG v1.8.7
    )
    FetchContent_MakeAvailable(drogon)
else()
    find_package(Drogon REQUIRED)
endif()

# Common compile options
add_compile_options(
    -Wall
    -Wextra
    -Werror
    -Wpedantic
    -Wno-unused-parameter
)

# Compiler-specific options
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(-fstack-protector-strong)
    
    if(CMAKE_BUILD_TYPE STREQUAL "Debug" AND ENABLE_SANITIZERS)
        add_compile_options(-fsanitize=address,undefined -fno-omit-frame-pointer)
        add_link_options(-fsanitize=address,undefined)
    endif()
endif()

# Enable coverage if requested
if(ENABLE_COVERAGE)
    add_compile_options(--coverage)
    add_link_options(--coverage)
endif()

# Global include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/core/include
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Define core library
add_subdirectory(core)

# Define service components
add_subdirectory(user-management)
add_subdirectory(document)
add_subdirectory(syllabus)
add_subdirectory(assessment)
add_subdirectory(scheduler)
add_subdirectory(analytics)
add_subdirectory(compliance)
add_subdirectory(visualization)
add_subdirectory(integration)
add_subdirectory(security)

# Build API gateway
add_subdirectory(api-gateway)

# Build tests if enabled
if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

# Build documentation if enabled
if(BUILD_DOCS)
    find_package(Doxygen REQUIRED)
    
    set(DOXYGEN_INPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
    set(DOXYGEN_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/docs)
    set(DOXYGEN_INDEX_FILE ${DOXYGEN_OUTPUT_DIR}/html/index.html)
    set(DOXYGEN_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
    
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in ${DOXYGEN_CONFIG_FILE} @ONLY)
    
    add_custom_command(
        OUTPUT ${DOXYGEN_INDEX_FILE}
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_CONFIG_FILE}
        MAIN_DEPENDENCY ${DOXYGEN_CONFIG_FILE}
        COMMENT "Generating documentation with Doxygen"
        VERBATIM
    )
    
    add_custom_target(docs DEPENDS ${DOXYGEN_INDEX_FILE})
endif()

# Installation rules
install(DIRECTORY config/ DESTINATION etc/pilot-training-platform)
install(DIRECTORY resources/ DESTINATION share/pilot-training-platform)

# Export targets
include(CMakePackageConfigHelpers)
configure_package_config_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/PilotTrainingPlatformConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/PilotTrainingPlatformConfig.cmake
    INSTALL_DESTINATION lib/cmake/PilotTrainingPlatform
)

write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/PilotTrainingPlatformConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

install(
    FILES
        ${CMAKE_CURRENT_BINARY_DIR}/PilotTrainingPlatformConfig.cmake
        ${CMAKE_CURRENT_BINARY_DIR}/PilotTrainingPlatformConfigVersion.cmake
    DESTINATION lib/cmake/PilotTrainingPlatform
)

# Create uninstall target
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
    IMMEDIATE @ONLY
)

add_custom_target(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
)

# Print build configuration summary
message(STATUS "")
message(STATUS "Advanced Pilot Training Platform Configuration:")
message(STATUS "  Version               : ${PROJECT_VERSION}")
message(STATUS "  Build type            : ${CMAKE_BUILD_TYPE}")
message(STATUS "  C++ compiler          : ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "  Install prefix        : ${CMAKE_INSTALL_PREFIX}")
message(STATUS "  Build tests           : ${BUILD_TESTS}")
message(STATUS "  Build documentation   : ${BUILD_DOCS}")
message(STATUS "  Enable sanitizers     : ${ENABLE_SANITIZERS}")
message(STATUS "  Enable coverage       : ${ENABLE_COVERAGE}")
message(STATUS "  System Drogon         : ${USE_SYSTEM_DROGON}")
message(STATUS "")