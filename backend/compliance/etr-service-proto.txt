syntax = "proto3";

package etr;

// Service definition for electronic training records
service ElectronicTrainingRecordsService {
  // Records management
  rpc CreateTrainingRecord (TrainingRecord) returns (RecordResponse);
  rpc GetTrainingRecord (RecordRequest) returns (TrainingRecord);
  rpc UpdateTrainingRecord (TrainingRecord) returns (RecordResponse);
  rpc DeleteTrainingRecord (RecordRequest) returns (RecordResponse);
  rpc ListTrainingRecords (ListRecordsRequest) returns (ListRecordsResponse);
  
  // Digital signature
  rpc SignRecord (SignatureRequest) returns (SignatureResponse);
  rpc VerifySignature (VerifyRequest) returns (VerifyResponse);
  
  // Compliance tracking
  rpc CheckCompliance (ComplianceRequest) returns (ComplianceResponse);
  rpc ListComplianceRequirements (ListComplianceRequest) returns (ListComplianceResponse);
  rpc MapRegulations (RegulationMappingRequest) returns (RegulationMappingResponse);
  
  // Syllabus management
  rpc CreateSyllabus (Syllabus) returns (SyllabusResponse);
  rpc GetSyllabus (SyllabusRequest) returns (Syllabus);
  rpc UpdateSyllabus (Syllabus) returns (SyllabusResponse);
  rpc DeleteSyllabus (SyllabusRequest) returns (SyllabusResponse);
  rpc ListSyllabi (ListSyllabiRequest) returns (ListSyllabiResponse);
  rpc TrackSyllabusChanges (SyllabusChangeRequest) returns (SyllabusChangeResponse);
}

// Record type
enum RecordType {
  UNKNOWN_RECORD = 0;
  TRAINING_SESSION = 1;
  ASSESSMENT = 2;
  CERTIFICATION = 3;
  QUALIFICATION = 4;
  ENDORSEMENT = 5;
}

// Training record
message TrainingRecord {
  string record_id = 1;
  string trainee_id = 2;
  string instructor_id = 3;
  RecordType record_type = 4;
  string course_id = 5;
  string syllabus_id = 6;
  string exercise_id = 7;
  int64 date = 8;  // Milliseconds since epoch
  int32 duration_minutes = 9;
  string location = 10;
  string aircraft_type = 11;
  repeated GradeItem grades = 12;
  repeated string attachments = 13;
  string comments = 14;
  SignatureInfo trainee_signature = 15;
  SignatureInfo instructor_signature = 16;
  bool is_draft = 17;
  int64 created_at = 18;  // Milliseconds since epoch
  int64 updated_at = 19;  // Milliseconds since epoch
  map<string, string> metadata = 20;
}

// Grade item
message GradeItem {
  string criteria_id = 1;
  string criteria_name = 2;
  int32 grade = 3;  // 1-4 scale
  string comments = 4;
}

// Signature information
message SignatureInfo {
  string signer_id = 1;
  string signer_name = 2;
  string certificate_id = 3;
  bytes signature_data = 4;
  int64 timestamp = 5;  // Milliseconds since epoch
  bool is_valid = 6;
}

// Record request
message RecordRequest {
  string record_id = 1;
}

// Record response
message RecordResponse {
  bool success = 1;
  string record_id = 2;
  string error_message = 3;
  int64 timestamp = 4;  // Milliseconds since epoch
}

// List records request
message ListRecordsRequest {
  string trainee_id = 1;
  string instructor_id = 2;
  string course_id = 3;
  string syllabus_id = 4;
  RecordType record_type = 5;
  int64 start_date = 6;  // Milliseconds since epoch
  int64 end_date = 7;  // Milliseconds since epoch
  int32 page = 8;
  int32 page_size = 9;
  string sort_by = 10;
  bool ascending = 11;
}

// List records response
message ListRecordsResponse {
  bool success = 1;
  repeated TrainingRecord records = 2;
  int32 total_count = 3;
  int32 page = 4;
  int32 page_size = 5;
  string error_message = 6;
}

// Signature request
message SignatureRequest {
  string record_id = 1;
  string signer_id = 2;
  string certificate_data = 3;
  bytes signature_data = 4;
  bool is_instructor = 5;
}

// Signature response
message SignatureResponse {
  bool success = 1;
  string record_id = 2;
  string error_message = 3;
  SignatureInfo signature = 4;
}

// Verify request
message VerifyRequest {
  string record_id = 1;
  string signer_id = 2;
}

// Verify response
message VerifyResponse {
  bool success = 1;
  string record_id = 2;
  string error_message = 3;
  bool is_valid = 4;
  SignatureInfo signature = 5;
}

// Compliance request
message ComplianceRequest {
  string trainee_id = 1;
  string regulation_id = 2;
  string certification_type = 3;
}

// Compliance response
message ComplianceResponse {
  bool success = 1;
  bool is_compliant = 2;
  repeated ComplianceItem compliance_items = 3;
  string error_message = 4;
}

// Compliance item
message ComplianceItem {
  string requirement_id = 1;
  string requirement_name = 2;
  string regulation_reference = 3;
  bool is_satisfied = 4;
  int32 required_count = 5;
  int32 completed_count = 6;
  repeated string satisfied_by_records = 7;
  int64 expiration_date = 8;  // Milliseconds since epoch, if applicable
}

// List compliance request
message ListComplianceRequest {
  string regulation_id = 1;
  string certification_type = 2;
}

// List compliance response
message ListComplianceResponse {
  bool success = 1;
  repeated ComplianceRequirement requirements = 2;
  string error_message = 3;
}

// Compliance requirement
message ComplianceRequirement {
  string requirement_id = 1;
  string requirement_name = 2;
  string regulation_id = 3;
  string regulation_name = 4;
  string regulation_reference = 5;
  string description = 6;
  int32 required_count = 7;
  int32 duration_days = 8;  // If time-limited requirement
  repeated string equivalent_requirements = 9;
}

// Regulation mapping request
message RegulationMappingRequest {
  string source_regulation_id = 1;
  string target_regulation_id = 2;
}

// Regulation mapping response
message RegulationMappingResponse {
  bool success = 1;
  repeated RegulationMapping mappings = 2;
  string error_message = 3;
}

// Regulation mapping
message RegulationMapping {
  string source_requirement_id = 1;
  string source_requirement_name = 2;
  string target_requirement_id = 3;
  string target_requirement_name = 4;
  double equivalence_factor = 5;  // 1.0 = full equivalence
  string notes = 6;
}

// Syllabus
message Syllabus {
  string syllabus_id = 1;
  string course_id = 2;
  string title = 3;
  string description = 4;
  string version = 5;
  int64 effective_date = 6;  // Milliseconds since epoch
  int64 expiration_date = 7;  // Milliseconds since epoch, optional
  string status = 8;  // DRAFT, APPROVED, ARCHIVED
  string author_id = 9;
  repeated SyllabusSection sections = 10;
  map<string, string> metadata = 11;
  int64 created_at = 12;  // Milliseconds since epoch
  int64 updated_at = 13;  // Milliseconds since epoch
  SignatureInfo approval_signature = 14;
}

// Syllabus section
message SyllabusSection {
  string section_id = 1;
  string title = 2;
  string description = 3;
  int32 order = 4;
  repeated SyllabusExercise exercises = 5;
}

// Syllabus exercise
message SyllabusExercise {
  string exercise_id = 1;
  string title = 2;
  string description = 3;
  int32 order = 4;
  int32 duration_minutes = 5;
  string exercise_type = 6;  // GROUND, SIMULATOR, FLIGHT, etc.
  repeated string objectives = 7;
  repeated string references = 8;
  repeated string equipment = 9;
  repeated GradingCriteria grading_criteria = 10;
  repeated string prerequisite_exercises = 11;
  map<string, string> metadata = 12;
}

// Grading criteria
message GradingCriteria {
  string criteria_id = 1;
  string name = 2;
  string description = 3;
  repeated GradeDefinition grade_definitions = 4;
  bool is_required = 5;
  map<string, string> regulation_references = 6;
}

// Grade definition
message GradeDefinition {
  int32 grade = 1;  // 1-4 scale
  string description = 2;
  bool is_passing = 3;
}

// Syllabus request
message SyllabusRequest {
  string syllabus_id = 1;
  string version = 2;  // Optional
}

// Syllabus response
message SyllabusResponse {
  bool success = 1;
  string syllabus_id = 2;
  string version = 3;
  string error_message = 4;
}

// List syllabi request
message ListSyllabiRequest {
  string course_id = 1;
  string status = 2;
  int64 effective_date = 3;  // Milliseconds since epoch
  int32 page = 4;
  int32 page_size = 5;
  string sort_by = 6;
  bool ascending = 7;
}

// List syllabi response
message ListSyllabiResponse {
  bool success = 1;
  repeated SyllabusSummary syllabi = 2;
  int32 total_count = 3;
  int32 page = 4;
  int32 page_size = 5;
  string error_message = 6;
}

// Syllabus summary
message SyllabusSummary {
  string syllabus_id = 1;
  string course_id = 2;
  string title = 3;
  string version = 4;
  int64 effective_date = 5;  // Milliseconds since epoch
  int64 expiration_date = 6;  // Milliseconds since epoch, optional
  string status = 7;
  string author_id = 8;
  int64 created_at = 9;  // Milliseconds since epoch
  int64 updated_at = 10;  // Milliseconds since epoch
}

// Syllabus change request
message SyllabusChangeRequest {
  string syllabus_id = 1;
  string from_version = 2;
  string to_version = 3;
}

// Syllabus change response
message SyllabusChangeResponse {
  bool success = 1;
  string syllabus_id = 2;
  string from_version = 3;
  string to_version = 4;
  repeated SyllabusChange changes = 5;
  string error_message = 6;
}

// Syllabus change
message SyllabusChange {
  string change_type = 1;  // ADDED, MODIFIED, REMOVED
  string element_type = 2;  // SECTION, EXERCISE, CRITERIA, etc.
  string element_id = 3;
  string parent_id = 4;  // Optional
  string description = 5;
  map<string, string> old_values = 6;
  map<string, string> new_values = 7;
  string rationale = 8;
  string author_id = 9;
  int64 timestamp = 10;  // Milliseconds since epoch
}