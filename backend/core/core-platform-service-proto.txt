syntax = "proto3";

package core_platform;

// Service interface for inter-service communication
service MessagingService {
  // Send a message to a service
  rpc SendMessage (MessageRequest) returns (MessageResponse);
  
  // Stream messages (for future use)
  rpc StreamMessages (stream MessageRequest) returns (stream MessageResponse);
}

// Message request structure
message MessageRequest {
  string id = 1;
  string sender = 2;
  string target = 3;
  string type = 4;
  string payload = 5;  // JSON-encoded payload
  int64 timestamp = 6;
}

// Message response structure
message MessageResponse {
  string id = 1;
  string sender = 2;
  string target = 3;
  string type = 4;
  string payload = 5;  // JSON-encoded payload
  int64 timestamp = 6;
  bool success = 7;
  string error_message = 8;
}

// Authentication service
service AuthService {
  // Authenticate a user
  rpc Authenticate (AuthRequest) returns (AuthResponse);
  
  // Validate a token
  rpc ValidateToken (TokenValidationRequest) returns (TokenValidationResponse);
  
  // Refresh a token
  rpc RefreshToken (TokenRefreshRequest) returns (AuthResponse);
}

// Authentication request
message AuthRequest {
  string username = 1;
  string password = 2;
  string certificate = 3;  // Optional certificate in PEM format
}

// Authentication response
message AuthResponse {
  bool success = 1;
  string token = 2;
  string refresh_token = 3;
  int64 expiry = 4;
  string user_id = 5;
  repeated string roles = 6;
  string error_message = 7;
}

// Token validation request
message TokenValidationRequest {
  string token = 1;
}

// Token validation response
message TokenValidationResponse {
  bool valid = 1;
  string user_id = 2;
  repeated string roles = 3;
  string error_message = 4;
}

// Token refresh request
message TokenRefreshRequest {
  string refresh_token = 1;
}

// Health check service
service HealthService {
  // Check the health of a service
  rpc Check (HealthCheckRequest) returns (HealthCheckResponse);
}

// Health check request
message HealthCheckRequest {
  string service = 1;
}

// Health check response with service status
message HealthCheckResponse {
  enum Status {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  Status status = 1;
}

// Configuration service
service ConfigService {
  // Get a configuration value
  rpc GetConfig (ConfigRequest) returns (ConfigResponse);
  
  // Set a configuration value
  rpc SetConfig (ConfigUpdateRequest) returns (ConfigResponse);
}

// Configuration request
message ConfigRequest {
  string key = 1;
}

// Configuration response
message ConfigResponse {
  bool success = 1;
  string value = 2;  // JSON-encoded value
  string error_message = 3;
}

// Configuration update request
message ConfigUpdateRequest {
  string key = 1;
  string value = 2;  // JSON-encoded value
}

// Metrics service
service MetricsService {
  // Report metrics
  rpc ReportMetrics (MetricsReport) returns (MetricsResponse);
  
  // Stream metrics (for continuous reporting)
  rpc StreamMetrics (stream MetricsReport) returns (MetricsResponse);
}

// Metrics report
message MetricsReport {
  string service = 1;
  string instance = 2;
  repeated Metric metrics = 3;
  int64 timestamp = 4;
}

// Individual metric
message Metric {
  string name = 1;
  double value = 2;
  enum Type {
    COUNTER = 0;
    GAUGE = 1;
    HISTOGRAM = 2;
    SUMMARY = 3;
  }
  Type type = 3;
  map<string, string> labels = 4;
}

// Metrics response
message MetricsResponse {
  bool success = 1;
  string error_message = 2;
}