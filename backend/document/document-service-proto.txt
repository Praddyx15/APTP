syntax = "proto3";

package document;

// Service definition for document management
service DocumentService {
  // Document management operations
  rpc UploadDocument (UploadDocumentRequest) returns (DocumentResponse);
  rpc GetDocument (GetDocumentRequest) returns (Document);
  rpc UpdateDocument (UpdateDocumentRequest) returns (DocumentResponse);
  rpc DeleteDocument (DeleteDocumentRequest) returns (DocumentResponse);
  rpc ListDocuments (ListDocumentsRequest) returns (ListDocumentsResponse);
  
  // Content extraction
  rpc ExtractContent (ExtractContentRequest) returns (ExtractContentResponse);
  rpc SearchDocuments (SearchRequest) returns (SearchResponse);
  rpc AnalyzeDocument (AnalyzeDocumentRequest) returns (AnalyzeDocumentResponse);
  
  // Version control
  rpc GetDocumentVersion (GetDocumentVersionRequest) returns (Document);
  rpc ListDocumentVersions (ListVersionsRequest) returns (ListVersionsResponse);
  rpc CompareVersions (CompareVersionsRequest) returns (CompareVersionsResponse);
}

// Document type
enum DocumentType {
  UNKNOWN = 0;
  PDF = 1;
  DOCX = 2;
  XLSX = 3;
  HTML = 4;
  TXT = 5;
  IMAGE = 6;
}

// Document status
enum DocumentStatus {
  DRAFT = 0;
  PUBLISHED = 1;
  ARCHIVED = 2;
}

// Document security classification
enum SecurityClassification {
  PUBLIC = 0;
  INTERNAL = 1;
  CONFIDENTIAL = 2;
  RESTRICTED = 3;
}

// Document
message Document {
  string document_id = 1;
  string title = 2;
  string description = 3;
  DocumentType document_type = 4;
  DocumentStatus status = 5;
  SecurityClassification classification = 6;
  string author_id = 7;
  string version = 8;
  int64 created_at = 9;  // Milliseconds since epoch
  int64 updated_at = 10;  // Milliseconds since epoch
  int64 size_bytes = 11;
  string content_type = 12;
  string filename = 13;
  map<string, string> metadata = 14;
  repeated string tags = 15;
  string category = 16;
  bytes content = 17;  // Document content (may be empty for large documents)
}

// Upload document request
message UploadDocumentRequest {
  string title = 1;
  string description = 2;
  bytes content = 3;
  string filename = 4;
  string content_type = 5;
  DocumentStatus status = 6;
  SecurityClassification classification = 7;
  map<string, string> metadata = 8;
  repeated string tags = 9;
  string category = 10;
  bool extract_text = 11;  // Whether to extract text content
  bool generate_preview = 12;  // Whether to generate preview
}

// Get document request
message GetDocumentRequest {
  string document_id = 1;
  bool include_content = 2;  // Whether to include document content
}

// Update document request
message UpdateDocumentRequest {
  string document_id = 1;
  string title = 2;
  string description = 3;
  bytes content = 4;  // Optional - only if content is updated
  DocumentStatus status = 5;
  SecurityClassification classification = 6;
  map<string, string> metadata = 7;
  repeated string tags = 8;
  string category = 9;
}

// Delete document request
message DeleteDocumentRequest {
  string document_id = 1;
  bool permanently = 2;  // Whether to permanently delete
}

// Document response
message DocumentResponse {
  bool success = 1;
  string document_id = 2;
  string error_message = 3;
  int64 timestamp = 4;  // Milliseconds since epoch
}

// List documents request
message ListDocumentsRequest {
  string author_id = 1;  // Filter by author
  DocumentType document_type = 2;  // Filter by type
  DocumentStatus status = 3;  // Filter by status
  string category = 4;  // Filter by category
  repeated string tags = 5;  // Filter by tags
  int64 start_date = 6;  // Filter by date range (start)
  int64 end_date = 7;  // Filter by date range (end)
  int32 page = 8;
  int32 page_size = 9;
  string sort_by = 10;
  bool ascending = 11;
  string query = 12;  // Free text search
}

// List documents response
message ListDocumentsResponse {
  bool success = 1;
  repeated DocumentSummary documents = 2;
  int32 total_count = 3;
  int32 page = 4;
  int32 page_size = 5;
  string error_message = 6;
}

// Document summary (without content)
message DocumentSummary {
  string document_id = 1;
  string title = 2;
  string description = 3;
  DocumentType document_type = 4;
  DocumentStatus status = 5;
  SecurityClassification classification = 6;
  string author_id = 7;
  string version = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
  int64 size_bytes = 11;
  string content_type = 12;
  string filename = 13;
  repeated string tags = 14;
  string category = 15;
  bool has_text = 16;  // Whether text has been extracted
  bool has_preview = 17;  // Whether preview is available
}

// Extract content request
message ExtractContentRequest {
  string document_id = 1;
  bool extract_text = 2;
  bool extract_metadata = 3;
  bool extract_images = 4;
  bool extract_tables = 5;
  bool use_ocr = 6;  // Whether to use OCR for images and PDFs
  string language = 7;  // Language hint for OCR
}

// Extract content response
message ExtractContentResponse {
  bool success = 1;
  string document_id = 2;
  string text_content = 3;
  repeated TableData tables = 4;
  repeated ImageData images = 5;
  map<string, string> extracted_metadata = 6;
  string error_message = 7;
}

// Table data
message TableData {
  int32 table_index = 1;
  repeated string headers = 2;
  repeated Row rows = 3;
  int32 page_number = 4;
  
  message Row {
    repeated string cells = 1;
  }
}

// Image data
message ImageData {
  int32 image_index = 1;
  bytes image_data = 2;
  string image_type = 3;
  int32 width = 4;
  int32 height = 5;
  int32 page_number = 6;
}

// Search request
message SearchRequest {
  string query = 1;
  repeated string document_ids = 2;  // Restrict to these documents (optional)
  string category = 3;  // Restrict to category (optional)
  repeated string tags = 4;  // Restrict to tags (optional)
  DocumentType document_type = 5;  // Restrict to type (optional)
  int32 page = 6;
  int32 page_size = 7;
  bool highlight_results = 8;  // Whether to highlight matching text
}

// Search response
message SearchResponse {
  bool success = 1;
  repeated SearchResult results = 2;
  int32 total_count = 3;
  int32 page = 4;
  int32 page_size = 5;
  string error_message = 6;
}

// Search result
message SearchResult {
  DocumentSummary document = 1;
  double relevance_score = 2;
  repeated string highlights = 3;  // Highlighted text snippets
}

// Analyze document request
message AnalyzeDocumentRequest {
  string document_id = 1;
  bool analyze_sentiment = 2;
  bool analyze_entities = 3;
  bool analyze_categories = 4;
  bool analyze_key_phrases = 5;
  bool analyze_language = 6;
}

// Analyze document response
message AnalyzeDocumentResponse {
  bool success = 1;
  string document_id = 2;
  Sentiment sentiment = 3;
  repeated Entity entities = 4;
  repeated Category categories = 5;
  repeated string key_phrases = 6;
  string detected_language = 7;
  float language_confidence = 8;
  string error_message = 9;
}

// Sentiment analysis
message Sentiment {
  float score = 1;  // -1.0 to 1.0
  string label = 2;  // POSITIVE, NEGATIVE, NEUTRAL
}

// Entity
message Entity {
  string name = 1;
  string type = 2;  // PERSON, ORGANIZATION, LOCATION, etc.
  float confidence = 3;
}

// Category
message Category {
  string name = 1;
  float confidence = 2;
}

// Get document version request
message GetDocumentVersionRequest {
  string document_id = 1;
  string version = 2;
  bool include_content = 3;
}

// List versions request
message ListVersionsRequest {
  string document_id = 1;
  int32 page = 2;
  int32 page_size = 3;
}

// List versions response
message ListVersionsResponse {
  bool success = 1;
  string document_id = 2;
  repeated VersionInfo versions = 3;
  int32 total_count = 4;
  int32 page = 5;
  int32 page_size = 6;
  string error_message = 7;
}

// Version info
message VersionInfo {
  string version = 1;
  string author_id = 2;
  int64 created_at = 3;
  string comment = 4;
  int64 size_bytes = 5;
  DocumentStatus status = 6;
}

// Compare versions request
message CompareVersionsRequest {
  string document_id = 1;
  string version1 = 2;
  string version2 = 3;
}

// Compare versions response
message CompareVersionsResponse {
  bool success = 1;
  string document_id = 2;
  string version1 = 3;
  string version2 = 4;
  repeated Difference differences = 5;
  string error_message = 6;
}

// Difference between versions
message Difference {
  enum DiffType {
    ADDED = 0;
    REMOVED = 1;
    CHANGED = 2;
  }
  
  DiffType type = 1;
  string path = 2;  // Path to the changed element (for structured docs)
  string old_value = 3;
  string new_value = 4;
}