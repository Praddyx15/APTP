-- Create schema for ETR service
CREATE SCHEMA IF NOT EXISTS etr;

-- Record types
CREATE TYPE etr.record_type AS ENUM (
    'UNKNOWN',
    'TRAINING_SESSION',
    'ASSESSMENT',
    'CERTIFICATION',
    'QUALIFICATION',
    'ENDORSEMENT'
);

-- Syllabus status
CREATE TYPE etr.syllabus_status AS ENUM (
    'DRAFT',
    'APPROVED',
    'ARCHIVED'
);

-- Change type
CREATE TYPE etr.change_type AS ENUM (
    'ADDED',
    'MODIFIED',
    'REMOVED'
);

-- Element type
CREATE TYPE etr.element_type AS ENUM (
    'SYLLABUS',
    'SECTION',
    'EXERCISE',
    'CRITERIA',
    'OBJECTIVE',
    'REFERENCE',
    'EQUIPMENT',
    'PREREQUISITE',
    'METADATA'
);

-- Users table (minimal, would typically link to core platform service)
CREATE TABLE etr.users (
    user_id TEXT PRIMARY KEY,
    username TEXT NOT NULL,
    role TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Certificates table
CREATE TABLE etr.certificates (
    certificate_id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL REFERENCES etr.users(user_id),
    subject_name TEXT NOT NULL,
    issuer_name TEXT NOT NULL,
    serial_number TEXT NOT NULL,
    not_before TIMESTAMP WITH TIME ZONE NOT NULL,
    not_after TIMESTAMP WITH TIME ZONE NOT NULL,
    raw_data BYTEA NOT NULL,
    is_valid BOOLEAN NOT NULL DEFAULT TRUE,
    is_revoked BOOLEAN NOT NULL DEFAULT FALSE,
    revocation_reason TEXT,
    revocation_time TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    UNIQUE(user_id, serial_number)
);

-- Training records table
CREATE TABLE etr.training_records (
    record_id TEXT PRIMARY KEY,
    trainee_id TEXT NOT NULL REFERENCES etr.users(user_id),
    instructor_id TEXT NOT NULL REFERENCES etr.users(user_id),
    record_type etr.record_type NOT NULL,
    course_id TEXT NOT NULL,
    syllabus_id TEXT NOT NULL,
    exercise_id TEXT NOT NULL,
    date TIMESTAMP WITH TIME ZONE NOT NULL,
    duration_minutes INTEGER NOT NULL,
    location TEXT NOT NULL,
    aircraft_type TEXT,
    comments TEXT,
    is_draft BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Training record grades
CREATE TABLE etr.record_grades (
    record_id TEXT NOT NULL REFERENCES etr.training_records(record_id) ON DELETE CASCADE,
    criteria_id TEXT NOT NULL,
    criteria_name TEXT NOT NULL,
    grade INTEGER NOT NULL,
    comments TEXT,
    PRIMARY KEY (record_id, criteria_id)
);

-- Training record attachments
CREATE TABLE etr.record_attachments (
    record_id TEXT NOT NULL REFERENCES etr.training_records(record_id) ON DELETE CASCADE,
    attachment_path TEXT NOT NULL,
    attachment_name TEXT NOT NULL,
    content_type TEXT NOT NULL,
    size_bytes BIGINT NOT NULL,
    upload_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    PRIMARY KEY (record_id, attachment_path)
);

-- Training record metadata
CREATE TABLE etr.record_metadata (
    record_id TEXT NOT NULL REFERENCES etr.training_records(record_id) ON DELETE CASCADE,
    key TEXT NOT NULL,
    value TEXT NOT NULL,
    PRIMARY KEY (record_id, key)
);

-- Record signatures
CREATE TABLE etr.record_signatures (
    record_id TEXT NOT NULL REFERENCES etr.training_records(record_id) ON DELETE CASCADE,
    signer_id TEXT NOT NULL REFERENCES etr.users(user_id),
    signer_name TEXT NOT NULL,
    certificate_id TEXT REFERENCES etr.certificates(certificate_id),
    signature_data BYTEA NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    is_valid BOOLEAN NOT NULL,
    is_instructor BOOLEAN NOT NULL,
    PRIMARY KEY (record_id, signer_id)
);

-- Training record audit log
CREATE TABLE etr.record_audit_log (
    id SERIAL PRIMARY KEY,
    record_id TEXT NOT NULL REFERENCES etr.training_records(record_id) ON DELETE CASCADE,
    action TEXT NOT NULL,
    user_id TEXT NOT NULL REFERENCES etr.users(user_id),
    details TEXT,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Compliance requirements
CREATE TABLE etr.compliance_requirements (
    requirement_id TEXT PRIMARY KEY,
    requirement_name TEXT NOT NULL,
    regulation_id TEXT NOT NULL,
    regulation_name TEXT NOT NULL,
    regulation_reference TEXT NOT NULL,
    description TEXT,
    required_count INTEGER NOT NULL,
    duration_days INTEGER,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Equivalent requirements
CREATE TABLE etr.equivalent_requirements (
    source_requirement_id TEXT NOT NULL REFERENCES etr.compliance_requirements(requirement_id) ON DELETE CASCADE,
    target_requirement_id TEXT NOT NULL REFERENCES etr.compliance_requirements(requirement_id) ON DELETE CASCADE,
    PRIMARY KEY (source_requirement_id, target_requirement_id)
);

-- Regulation mappings
CREATE TABLE etr.regulation_mappings (
    source_requirement_id TEXT NOT NULL REFERENCES etr.compliance_requirements(requirement_id) ON DELETE CASCADE,
    target_requirement_id TEXT NOT NULL REFERENCES etr.compliance_requirements(requirement_id) ON DELETE CASCADE,
    equivalence_factor DOUBLE PRECISION NOT NULL,
    notes TEXT,
    PRIMARY KEY (source_requirement_id, target_requirement_id)
);

-- Trainee compliance status
CREATE TABLE etr.trainee_compliance (
    trainee_id TEXT NOT NULL REFERENCES etr.users(user_id),
    requirement_id TEXT NOT NULL REFERENCES etr.compliance_requirements(requirement_id) ON DELETE CASCADE,
    is_satisfied BOOLEAN NOT NULL DEFAULT FALSE,
    completed_count INTEGER NOT NULL DEFAULT 0,
    expiration_date TIMESTAMP WITH TIME ZONE,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    PRIMARY KEY (trainee_id, requirement_id)
);

-- Trainee compliance records
CREATE TABLE etr.trainee_compliance_records (
    trainee_id TEXT NOT NULL,
    requirement_id TEXT NOT NULL,
    record_id TEXT NOT NULL REFERENCES etr.training_records(record_id) ON DELETE CASCADE,
    PRIMARY KEY (trainee_id, requirement_id, record_id),
    FOREIGN KEY (trainee_id, requirement_id) REFERENCES etr.trainee_compliance(trainee_id, requirement_id) ON DELETE CASCADE
);

-- Syllabi
CREATE TABLE etr.syllabi (
    syllabus_id TEXT PRIMARY KEY,
    course_id TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    version TEXT NOT NULL,
    effective_date TIMESTAMP WITH TIME ZONE NOT NULL,
    expiration_date TIMESTAMP WITH TIME ZONE,
    status etr.syllabus_status NOT NULL,
    author_id TEXT NOT NULL REFERENCES etr.users(user_id),
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    UNIQUE (syllabus_id, version)
);

-- Syllabus metadata
CREATE TABLE etr.syllabus_metadata (
    syllabus_id TEXT NOT NULL,
    version TEXT NOT NULL,
    key TEXT NOT NULL,
    value TEXT NOT NULL,
    PRIMARY KEY (syllabus_id, version, key),
    FOREIGN KEY (syllabus_id, version) REFERENCES etr.syllabi(syllabus_id, version) ON DELETE CASCADE
);

-- Syllabus approval signatures
CREATE TABLE etr.syllabus_signatures (
    syllabus_id TEXT NOT NULL,
    version TEXT NOT NULL,
    signer_id TEXT NOT NULL REFERENCES etr.users(user_id),
    signer_name TEXT NOT NULL,
    certificate_id TEXT REFERENCES etr.certificates(certificate_id),
    signature_data BYTEA NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    is_valid BOOLEAN NOT NULL,
    PRIMARY KEY (syllabus_id, version),
    FOREIGN KEY (syllabus_id, version) REFERENCES etr.syllabi(syllabus_id, version) ON DELETE CASCADE
);

-- Syllabus sections
CREATE TABLE etr.syllabus_sections (
    section_id TEXT PRIMARY KEY,
    syllabus_id TEXT NOT NULL,
    version TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    section_order INTEGER NOT NULL,
    FOREIGN KEY (syllabus_id, version) REFERENCES etr.syllabi(syllabus_id, version) ON DELETE CASCADE
);

-- Syllabus exercises
CREATE TABLE etr.syllabus_exercises (
    exercise_id TEXT PRIMARY KEY,
    section_id TEXT NOT NULL REFERENCES etr.syllabus_sections(section_id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    exercise_order INTEGER NOT NULL,
    duration_minutes INTEGER NOT NULL,
    exercise_type TEXT NOT NULL
);

-- Exercise objectives
CREATE TABLE etr.exercise_objectives (
    exercise_id TEXT NOT NULL REFERENCES etr.syllabus_exercises(exercise_id) ON DELETE CASCADE,
    objective TEXT NOT NULL,
    objective_order INTEGER NOT NULL,
    PRIMARY KEY (exercise_id, objective_order)
);

-- Exercise references
CREATE TABLE etr.exercise_references (
    exercise_id TEXT NOT NULL REFERENCES etr.syllabus_exercises(exercise_id) ON DELETE CASCADE,
    reference TEXT NOT NULL,
    reference_order INTEGER NOT NULL,
    PRIMARY KEY (exercise_id, reference_order)
);

-- Exercise equipment
CREATE TABLE etr.exercise_equipment (
    exercise_id TEXT NOT NULL REFERENCES etr.syllabus_exercises(exercise_id) ON DELETE CASCADE,
    equipment TEXT NOT NULL,
    equipment_order INTEGER NOT NULL,
    PRIMARY KEY (exercise_id, equipment_order)
);

-- Exercise prerequisites
CREATE TABLE etr.exercise_prerequisites (
    exercise_id TEXT NOT NULL REFERENCES etr.syllabus_exercises(exercise_id) ON DELETE CASCADE,
    prerequisite_exercise_id TEXT NOT NULL,
    PRIMARY KEY (exercise_id, prerequisite_exercise_id)
);

-- Exercise metadata
CREATE TABLE etr.exercise_metadata (
    exercise_id TEXT NOT NULL REFERENCES etr.syllabus_exercises(exercise_id) ON DELETE CASCADE,
    key TEXT NOT NULL,
    value TEXT NOT NULL,
    PRIMARY KEY (exercise_id, key)
);

-- Grading criteria
CREATE TABLE etr.grading_criteria (
    criteria_id TEXT PRIMARY KEY,
    exercise_id TEXT NOT NULL REFERENCES etr.syllabus_exercises(exercise_id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    is_required BOOLEAN NOT NULL DEFAULT TRUE
);

-- Regulation references for criteria
CREATE TABLE etr.criteria_regulations (
    criteria_id TEXT NOT NULL REFERENCES etr.grading_criteria(criteria_id) ON DELETE CASCADE,
    regulation_id TEXT NOT NULL,
    regulation_reference TEXT NOT NULL,
    PRIMARY KEY (criteria_id, regulation_id)
);

-- Grade definitions
CREATE TABLE etr.grade_definitions (
    criteria_id TEXT NOT NULL REFERENCES etr.grading_criteria(criteria_id) ON DELETE CASCADE,
    grade INTEGER NOT NULL,
    description TEXT NOT NULL,
    is_passing BOOLEAN NOT NULL,
    PRIMARY KEY (criteria_id, grade)
);

-- Syllabus changes
CREATE TABLE etr.syllabus_changes (
    id SERIAL PRIMARY KEY,
    syllabus_id TEXT NOT NULL,
    from_version TEXT NOT NULL,
    to_version TEXT NOT NULL,
    change_type etr.change_type NOT NULL,
    element_type etr.element_type NOT NULL,
    element_id TEXT NOT NULL,
    parent_id TEXT,
    description TEXT,
    rationale TEXT,
    author_id TEXT NOT NULL REFERENCES etr.users(user_id),
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    FOREIGN KEY (syllabus_id) REFERENCES etr.syllabi(syllabus_id) ON DELETE CASCADE
);

-- Old and new values for syllabus changes
CREATE TABLE etr.syllabus_change_values (
    change_id INTEGER NOT NULL REFERENCES etr.syllabus_changes(id) ON DELETE CASCADE,
    key TEXT NOT NULL,
    old_value TEXT,
    new_value TEXT,
    PRIMARY KEY (change_id, key)
);

-- Create indexes for frequently accessed data
CREATE INDEX idx_training_records_trainee ON etr.training_records(trainee_id);
CREATE INDEX idx_training_records_instructor ON etr.training_records(instructor_id);
CREATE INDEX idx_training_records_course ON etr.training_records(course_id);
CREATE INDEX idx_training_records_syllabus ON etr.training_records(syllabus_id);
CREATE INDEX idx_training_records_date ON etr.training_records(date);
CREATE INDEX idx_training_records_type ON etr.training_records(record_type);

CREATE INDEX idx_record_audit_log_record ON etr.record_audit_log(record_id);
CREATE INDEX idx_record_audit_log_user ON etr.record_audit_log(user_id);
CREATE INDEX idx_record_audit_log_timestamp ON etr.record_audit_log(timestamp);

CREATE INDEX idx_compliance_requirements_regulation ON etr.compliance_requirements(regulation_id);

CREATE INDEX idx_trainee_compliance_trainee ON etr.trainee_compliance(trainee_id);
CREATE INDEX idx_trainee_compliance_requirement ON etr.trainee_compliance(requirement_id);
CREATE INDEX idx_trainee_compliance_satisfaction ON etr.trainee_compliance(is_satisfied);

CREATE INDEX idx_syllabi_course ON etr.syllabi(course_id);
CREATE INDEX idx_syllabi_status ON etr.syllabi(status);
CREATE INDEX idx_syllabi_effective_date ON etr.syllabi(effective_date);
CREATE INDEX idx_syllabi_author ON etr.syllabi(author_id);

CREATE INDEX idx_syllabus_sections_syllabus ON etr.syllabus_sections(syllabus_id, version);
CREATE INDEX idx_syllabus_exercises_section ON etr.syllabus_exercises(section_id);

CREATE INDEX idx_syllabus_changes_syllabus ON etr.syllabus_changes(syllabus_id);
CREATE INDEX idx_syllabus_changes_versions ON etr.syllabus_changes(from_version, to_version);
CREATE INDEX idx_syllabus_changes_element ON etr.syllabus_changes(element_type, element_id);
CREATE INDEX idx_syllabus_changes_timestamp ON etr.syllabus_changes(timestamp);

-- Add triggers for updated_at timestamps
CREATE OR REPLACE FUNCTION etr.update_timestamp() 
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_training_records_timestamp
BEFORE UPDATE ON etr.training_records
FOR EACH ROW EXECUTE PROCEDURE etr.update_timestamp();

CREATE TRIGGER update_compliance_requirements_timestamp
BEFORE UPDATE ON etr.compliance_requirements
FOR EACH ROW EXECUTE PROCEDURE etr.update_timestamp();

CREATE TRIGGER update_syllabi_timestamp
BEFORE UPDATE ON etr.syllabi
FOR EACH ROW EXECUTE PROCEDURE etr.update_timestamp();

CREATE TRIGGER update_trainee_compliance_timestamp
BEFORE UPDATE ON etr.trainee_compliance
FOR EACH ROW EXECUTE PROCEDURE etr.update_timestamp();

CREATE TRIGGER update_users_timestamp
BEFORE UPDATE ON etr.users
FOR EACH ROW EXECUTE PROCEDURE etr.update_timestamp();