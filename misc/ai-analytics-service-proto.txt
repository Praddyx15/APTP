syntax = "proto3";

package ai_analytics;

// AI & Analytics Service
service AIAnalyticsService {
  // Performance analytics
  rpc AnalyzePerformance (PerformanceRequest) returns (PerformanceAnalysis);
  rpc GetPerformanceTrends (TrendsRequest) returns (TrendsResponse);
  rpc ComparePerformance (ComparisonRequest) returns (ComparisonResponse);
  
  // Cognitive state assessment
  rpc AssessCognitiveState (CognitiveStateRequest) returns (CognitiveStateResponse);
  rpc GetCognitiveStateTimeline (CognitiveTimelineRequest) returns (CognitiveTimelineResponse);
  
  // Predictive analytics
  rpc PredictPerformance (PredictionRequest) returns (PredictionResponse);
  rpc GetRiskFactors (RiskFactorsRequest) returns (RiskFactorsResponse);
  
  // Visualization
  rpc GenerateVisualization (VisualizationRequest) returns (VisualizationResponse);
  
  // Model management
  rpc ListModels (ListModelsRequest) returns (ListModelsResponse);
  rpc GetModelInfo (ModelInfoRequest) returns (ModelInfoResponse);
  rpc TrainModel (TrainModelRequest) returns (TrainModelResponse);
  rpc EvaluateModel (EvaluateModelRequest) returns (EvaluateModelResponse);
}

// Performance request
message PerformanceRequest {
  string trainee_id = 1;
  string course_id = 2;
  string exercise_id = 3;  // Optional
  int64 start_date = 4;  // Milliseconds since epoch
  int64 end_date = 5;  // Milliseconds since epoch
  repeated string metrics = 6;  // Specific metrics to analyze
}

// Performance analysis
message PerformanceAnalysis {
  string trainee_id = 1;
  repeated PerformanceMetric metrics = 2;
  repeated PerformanceInsight insights = 3;
  string summary = 4;
  repeated Recommendation recommendations = 5;
}

// Performance metric
message PerformanceMetric {
  string name = 1;
  string category = 2;
  double value = 3;
  double percentile = 4;  // Percentile relative to peers
  double baseline = 5;  // Baseline or expected value
  double trend = 6;  // Rate of change over time
  repeated HistoricalDataPoint historical_data = 7;
}

// Historical data point
message HistoricalDataPoint {
  int64 timestamp = 1;  // Milliseconds since epoch
  double value = 2;
  string label = 3;  // Optional label for this point
}

// Performance insight
message PerformanceInsight {
  string description = 1;
  string category = 2;
  double confidence = 3;  // 0.0 to 1.0
  string supporting_evidence = 4;
}

// Recommendation
message Recommendation {
  string description = 1;
  string category = 2;
  double expected_impact = 3;  // Expected improvement if followed
  string rationale = 4;
  repeated string suggested_exercises = 5;
}

// Trends request
message TrendsRequest {
  string trainee_id = 1;
  string course_id = 2;
  string metric = 3;
  int64 start_date = 4;  // Milliseconds since epoch
  int64 end_date = 5;  // Milliseconds since epoch
  int32 resolution = 6;  // Data points requested (e.g., 30 for monthly)
  bool include_peer_comparison = 7;
}

// Trends response
message TrendsResponse {
  string metric = 1;
  repeated HistoricalDataPoint data_points = 2;
  repeated HistoricalDataPoint peer_average = 3;  // Only if requested
  string trend_direction = 4;  // IMPROVING, STABLE, DECLINING
  double trend_slope = 5;
  double statistical_significance = 6;  // p-value
}

// Comparison request
message ComparisonRequest {
  string trainee_id = 1;
  string comparison_group = 2;  // PEERS, PREVIOUS_COHORT, TOP_PERFORMERS
  string course_id = 3;
  repeated string metrics = 4;
  int64 start_date = 5;  // Milliseconds since epoch
  int64 end_date = 6;  // Milliseconds since epoch
}

// Comparison response
message ComparisonResponse {
  string trainee_id = 1;
  string comparison_group = 2;
  repeated ComparisonMetric metrics = 3;
  repeated string strengths = 4;
  repeated string improvement_areas = 5;
  string overall_standing = 6;  // e.g., "75th percentile"
}

// Comparison metric
message ComparisonMetric {
  string name = 1;
  double trainee_value = 2;
  double comparison_mean = 3;
  double comparison_median = 4;
  double comparison_stddev = 5;
  double percentile = 6;
  double z_score = 7;
}

// Cognitive state request
message CognitiveStateRequest {
  string trainee_id = 1;
  string session_id = 2;
  repeated SensorData sensor_data = 3;
  string context = 4;  // e.g., "landing_approach", "emergency_procedure"
}

// Sensor data
message SensorData {
  string sensor_type = 1;  // EYE_TRACKING, HEART_RATE, EEG, etc.
  int64 timestamp = 2;  // Milliseconds since epoch
  map<string, double> metrics = 3;  // Sensor-specific metrics
  bytes raw_data = 4;  // Optional raw sensor data
}

// Cognitive state response
message CognitiveStateResponse {
  double workload_level = 1;  // 0.0 to 1.0
  double attention_level = 2;  // 0.0 to 1.0
  double stress_level = 3;  // 0.0 to 1.0
  double fatigue_level = 4;  // 0.0 to 1.0
  repeated CognitiveEvent events = 5;
  map<string, double> additional_metrics = 6;
  double assessment_confidence = 7;  // 0.0 to 1.0
}

// Cognitive event
message CognitiveEvent {
  string event_type = 1;  // ATTENTION_LAPSE, COGNITIVE_OVERLOAD, etc.
  int64 timestamp = 2;  // Milliseconds since epoch
  int64 duration_ms = 3;  // Duration in milliseconds
  double severity = 4;  // 0.0 to 1.0
  string description = 5;
}

// Cognitive timeline request
message CognitiveTimelineRequest {
  string trainee_id = 1;
  string session_id = 2;
  int64 start_time = 3;  // Milliseconds since epoch
  int64 end_time = 4;  // Milliseconds since epoch
  repeated string metrics = 5;  // Specific metrics to include
  int32 resolution_ms = 6;  // Desired time resolution in milliseconds
}

// Cognitive timeline response
message CognitiveTimelineResponse {
  string session_id = 1;
  repeated CognitiveTimePoint time_points = 2;
  repeated CognitiveEvent events = 3;
  repeated CognitivePhase phases = 4;
}

// Cognitive time point
message CognitiveTimePoint {
  int64 timestamp = 1;  // Milliseconds since epoch
  map<string, double> metrics = 2;  // Metrics at this time point
}

// Cognitive phase
message CognitivePhase {
  string phase_name = 1;
  int64 start_time = 2;  // Milliseconds since epoch
  int64 end_time = 3;  // Milliseconds since epoch
  string description = 4;
  map<string, double> average_metrics = 5;
}

// Prediction request
message PredictionRequest {
  string trainee_id = 1;
  string course_id = 2;
  string exercise_id = 3;
  repeated string features = 4;  // Specific features to use for prediction
  string target_metric = 5;  // What to predict
  string model_id = 6;  // Optional specific model to use
}

// Prediction response
message PredictionResponse {
  double predicted_value = 1;
  double confidence = 2;  // 0.0 to 1.0
  double prediction_error = 3;  // Expected error margin
  repeated FeatureImportance feature_importances = 4;
  repeated string factors = 5;  // Factors influencing this prediction
  map<string, double> alternative_scenarios = 6;  // Predicted values under different scenarios
}

// Feature importance
message FeatureImportance {
  string feature_name = 1;
  double importance = 2;  // 0.0 to 1.0
  double feature_value = 3;
  string interpretation = 4;
}

// Risk factors request
message RiskFactorsRequest {
  string trainee_id = 1;
  string course_id = 2;
  int32 top_k = 3;  // Number of risk factors to return
  double threshold = 4;  // Minimum risk score to include
}

// Risk factors response
message RiskFactorsResponse {
  string trainee_id = 1;
  double overall_risk_score = 2;  // 0.0 to 1.0
  repeated RiskFactor risk_factors = 3;
  repeated Recommendation mitigations = 4;
}

// Risk factor
message RiskFactor {
  string name = 1;
  double risk_score = 2;  // 0.0 to 1.0
  string description = 3;
  string evidence = 4;
  string trend = 5;  // INCREASING, STABLE, DECREASING
}

// Visualization request
message VisualizationRequest {
  string visualization_type = 1;  // PERFORMANCE_RADAR, COGNITIVE_TIMELINE, etc.
  string trainee_id = 2;
  string context = 3;  // course_id, session_id, etc.
  map<string, string> parameters = 4;
  string format = 5;  // SVG, PNG, HTML, JSON
}

// Visualization response
message VisualizationResponse {
  string visualization_type = 1;
  string format = 2;
  bytes data = 3;  // Visualization data in the requested format
  string html_snippet = 4;  // Optional HTML for embedding
  map<string, string> metadata = 5;
}

// List models request
message ListModelsRequest {
  string model_type = 1;  // Optional filter by model type
  bool include_metadata = 2;
}

// List models response
message ListModelsResponse {
  repeated ModelInfo models = 1;
}

// Model info request
message ModelInfoRequest {
  string model_id = 1;
  bool include_performance_metrics = 2;
}

// Model info response
message ModelInfoResponse {
  ModelInfo model_info = 1;
}

// Model info
message ModelInfo {
  string model_id = 1;
  string model_type = 2;
  string description = 3;
  string version = 4;
  int64 created_at = 5;  // Milliseconds since epoch
  int64 updated_at = 6;  // Milliseconds since epoch
  repeated string input_features = 7;
  repeated string output_features = 8;
  ModelPerformance performance = 9;
  map<string, string> hyperparameters = 10;
  string training_dataset = 11;
}

// Model performance
message ModelPerformance {
  double accuracy = 1;
  double precision = 2;
  double recall = 3;
  double f1_score = 4;
  double mse = 5;  // Mean squared error
  double mae = 6;  // Mean absolute error
  double r_squared = 7;
  int32 training_samples = 8;
  int32 validation_samples = 9;
}

// Train model request
message TrainModelRequest {
  string model_type = 1;
  string description = 2;
  string dataset_id = 3;
  map<string, string> hyperparameters = 4;
  repeated string features = 5;
  string target = 6;
  double validation_split = 7;  // 0.0 to 1.0
  bool save_model = 8;
}

// Train model response
message TrainModelResponse {
  string model_id = 1;
  bool success = 2;
  string error_message = 3;
  ModelPerformance performance = 4;
  int64 training_time_ms = 5;
}

// Evaluate model request
message EvaluateModelRequest {
  string model_id = 1;
  string dataset_id = 2;  // Optional test dataset
}

// Evaluate model response
message EvaluateModelResponse {
  string model_id = 1;
  ModelPerformance performance = 2;
  repeated PredictionError errors = 3;  // Sample of prediction errors
  string error_analysis = 4;
}

// Prediction error
message PredictionError {
  map<string, double> inputs = 1;
  double predicted_value = 2;
  double actual_value = 3;
  double error = 4;
}