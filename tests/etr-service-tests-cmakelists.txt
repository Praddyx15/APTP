cmake_minimum_required(VERSION 3.20)

# Find GTest
find_package(GTest REQUIRED)
include_directories(${GTEST_INCLUDE_DIRS})
include_directories(${CMAKE_SOURCE_DIR}/include)

# Record service tests
add_executable(record_service_test
    record_service_test.cpp
)
target_link_libraries(record_service_test
    PRIVATE
    ${GTEST_BOTH_LIBRARIES}
    gmock
    etr_lib
    pthread
)

# Digital signature tests
add_executable(digital_signature_test
    digital_signature_test.cpp
)
target_link_libraries(digital_signature_test
    PRIVATE
    ${GTEST_BOTH_LIBRARIES}
    gmock
    etr_lib
    pthread
)

# Compliance tests
add_executable(compliance_test
    compliance_test.cpp
)
target_link_libraries(compliance_test
    PRIVATE
    ${GTEST_BOTH_LIBRARIES}
    gmock
    etr_lib
    pthread
)

# Syllabus tests
add_executable(syllabus_test
    syllabus_test.cpp
)
target_link_libraries(syllabus_test
    PRIVATE
    ${GTEST_BOTH_LIBRARIES}
    gmock
    etr_lib
    pthread
)

# Database connection tests
add_executable(database_connection_test
    database_connection_test.cpp
)
target_link_libraries(database_connection_test
    PRIVATE
    ${GTEST_BOTH_LIBRARIES}
    gmock
    etr_lib
    pthread
)

# Integration tests
add_executable(integration_test
    integration_test.cpp
)
target_link_libraries(integration_test
    PRIVATE
    ${GTEST_BOTH_LIBRARIES}
    gmock
    etr_lib
    pthread
)

# Register tests
include(GoogleTest)
gtest_discover_tests(record_service_test)
gtest_discover_tests(digital_signature_test)
gtest_discover_tests(compliance_test)
gtest_discover_tests(syllabus_test)
gtest_discover_tests(database_connection_test)
gtest_discover_tests(integration_test)

# Add test target that runs all tests
add_custom_target(check
    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
    DEPENDS
        record_service_test
        digital_signature_test
        compliance_test
        syllabus_test
        database_connection_test
        integration_test
)

# Add code coverage target if compiler supports it
option(CODE_COVERAGE "Enable coverage reporting" OFF)
if(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    # Add required flags
    target_compile_options(record_service_test PRIVATE --coverage)
    target_link_options(record_service_test PRIVATE --coverage)
    
    target_compile_options(digital_signature_test PRIVATE --coverage)
    target_link_options(digital_signature_test PRIVATE --coverage)
    
    target_compile_options(compliance_test PRIVATE --coverage)
    target_link_options(compliance_test PRIVATE --coverage)
    
    target_compile_options(syllabus_test PRIVATE --coverage)
    target_link_options(syllabus_test PRIVATE --coverage)
    
    target_compile_options(database_connection_test PRIVATE --coverage)
    target_link_options(database_connection_test PRIVATE --coverage)
    
    target_compile_options(integration_test PRIVATE --coverage)
    target_link_options(integration_test PRIVATE --coverage)
    
    # Add coverage report target
    find_program(GCOVR gcovr REQUIRED)
    add_custom_target(coverage
        COMMAND ${GCOVR} --xml-pretty --exclude-unreachable-branches --print-summary
                -r ${CMAKE_SOURCE_DIR} --object-directory=${CMAKE_BINARY_DIR}
                --output=${CMAKE_BINARY_DIR}/coverage.xml
        DEPENDS check
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        COMMENT "Generating coverage report"
    )
endif()